import pandas as pd
import matplotlib.pyplot as plt
import argparse
import sys

def plot_pi_distribution(file_path, output_file, title, xlabel, ylabel, color, figsize_str, dpi):
    """
    Reads the output from calculate_pi.py and generates a line plot.

    Args:
        file_path (str): Path to the tab-separated data file (Window_Midpoint, Pi_Value).
        output_file (str): Path to save the output plot image.
        title (str): The title of the plot.
        xlabel (str): The label for the x-axis.
        ylabel (str): The label for the y-axis.
        color (str): The color of the plot line.
        figsize_str (str): Figure size as 'width,height' in inches.
        dpi (int): The resolution of the saved figure in dots-per-inch.
    """
    try:
        # Read the data using pandas. The separator is a tab ('\t').
        data = pd.read_csv(file_path, sep='\t')
        
        # Validate required columns
        if 'Window_Midpoint' not in data.columns or 'Pi_Value' not in data.columns:
            print(f"Error: Input file {file_path} must contain 'Window_Midpoint' and 'Pi_Value' columns.", file=sys.stderr)
            sys.exit(1)
            
    except FileNotFoundError:
        print(f"Error: The file '{file_path}' was not found.", file=sys.stderr)
        sys.exit(1)
    except pd.errors.EmptyDataError:
        print(f"Error: The file '{file_path}' is empty.", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"An error occurred while reading the file: {e}", file=sys.stderr)
        sys.exit(1)

    # Calculate the average pi value to draw a reference line
    average_pi = data['Pi_Value'].mean()

    # Parse figure size
    try:
        width, height = map(float, figsize_str.split(','))
    except ValueError:
        print(f"Error: Invalid figure size format '{figsize_str}'. Please use 'width,height'.", file=sys.stderr)
        sys.exit(1)

    # Create the plot
    ##############################################################
    # MODIFIED LINE BELOW TO ENSURE COMPATIBILITY
    ##############################################################
    plt.style.use('ggplot') # Use a compatible and nice-looking style
    
    fig, ax = plt.subplots(figsize=(width, height))

    # Plot the sliding window data
    ax.plot(data['Window_Midpoint'], data['Pi_Value'], color=color, linewidth=1.5, label='Sliding Window π')
    
    # Plot the average pi line
    ax.axhline(y=average_pi, color='red', linestyle='--', linewidth=1, label=f'Average π = {average_pi:.4f}')

    # Set labels and title
    ax.set_xlabel(xlabel, fontsize=12)
    ax.set_ylabel(ylabel, fontsize=12)
    ax.set_title(title, fontsize=14, weight='bold')

    # Set axis limits
    ax.set_xlim(0, data['Window_Midpoint'].max() + data['Window_Midpoint'].iloc[1] - data['Window_Midpoint'].iloc[0] if len(data) > 1 else 1)
    ax.set_ylim(0)

    # Add legend
    ax.legend()
    
    # Improve layout
    plt.tight_layout()

    # Save the figure
    try:
        plt.savefig(output_file, dpi=dpi, bbox_inches='tight')
        print(f"Plot successfully saved to '{output_file}'")
    except Exception as e:
        print(f"Error saving plot to '{output_file}': {e}", file=sys.stderr)
        sys.exit(1)


def main():
    """Main function to parse arguments and run the plotting script."""
    parser = argparse.ArgumentParser(
        description="Visualize nucleotide diversity (π) from a sliding window analysis.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        "pi_file",
        metavar="PI_FILE",
        type=str,
        help="Path to the input data file generated by the calculation script (tab-separated)."
    )
    parser.add_argument(
        "-o", "--output",
        type=str,
        default="pi_distribution.png",
        help="Path for the output plot file (e.g., plot.png, plot.svg, plot.pdf).\nDefault: pi_distribution.png"
    )
    parser.add_argument(
        "--title",
        type=str,
        default="Sliding Window Analysis of Nucleotide Diversity (π)",
        help="The main title of the plot."
    )
    parser.add_argument(
        "--xlabel",
        type=str,
        default="Genome Position (bp)",
        help="The label for the X-axis."
    )
    parser.add_argument(
        "--ylabel",
        type=str,
        default="Nucleotide Diversity (π)",
        help="The label for the Y-axis."
    )
    parser.add_argument(
        "--color",
        type=str,
        default="#1f77b4", # A nice blue color
        help="Color for the plot line (e.g., 'blue', '#FF5733')."
    )
    parser.add_argument(
        "--figsize",
        type=str,
        default="12,6",
        help="Figure size as 'width,height' in inches (e.g., '10,5').\nDefault: 12,6"
    )
    parser.add_argument(
        "--dpi",
        type=int,
        default=300,
        help="Resolution of the output image in Dots Per Inch (DPI).\nDefault: 300"
    )
    
    args = parser.parse_args()
    
    plot_pi_distribution(
        file_path=args.pi_file,
        output_file=args.output,
        title=args.title,
        xlabel=args.xlabel,
        ylabel=args.ylabel,
        color=args.color,
        figsize_str=args.figsize,
        dpi=args.dpi
    )

if __name__ == "__main__":
    main()